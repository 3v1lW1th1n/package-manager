#! /usr/bin/env python

from __future__ import print_function
import os
import sys
import argparse
import logging

if sys.version_info[0] < 3:
    import ConfigParser as configparser
else:
    import configparser

import bropkg


def print_error(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def config_items(config, section):
    # Same as config.items(section), but exclude default keys.
    defaults = {key for key, _ in config.items('DEFAULT')}
    items = config.items(section)
    return [(key, value) for (key, value) in items if key not in defaults]


def create_manager(config_path):

    def require_config_section(section):
        sections = config.sections()

        if section in sections:
            return

        print_error(
            'error: config file "{}" is missing a "{}" section'.format(
                config_path, section))
        sys.exit(1)

    def require_config_option(section, option):
        if config.has_option(section, option):
            return

        print_error(str.format('error: config file "{}" is missing option '
                               '"{}" in section "{}"',
                               config_path, option, section))

        sys.exit(1)

    client_path = os.path.abspath(__file__)
    client_dir = os.path.dirname(client_path)
    statedir = os.path.join(os.path.expanduser('~'), '.bro-pkg')

    if not config_path:
        config_path = os.environ.get('BRO_PKG_CONFIG_FILE')

    if not config_path:
        config_path = os.path.join(statedir, 'config')

        if not os.path.isfile(config_path):
            # @todo: if installed, use the installed location instead
            config_path = os.path.join(client_dir, 'bro-pkg.config')

    if not os.path.isfile(config_path):
        print_error('error: invalid config file "{}"'.format(config_path))
        sys.exit(1)

    config = configparser.SafeConfigParser()
    config.read(config_path)
    require_config_section('sources')
    require_config_option('sources', 'default')

    scriptdir = os.path.join(statedir, 'scriptdir')
    plugindir = os.path.join(statedir, 'plugindir')
    bro_dist = ''
    bro_exe = bropkg.util.find_program('bro')

    if config.has_section('paths'):
        def config_option_set(config, section, option):
            return config.has_option(section, option) and config.get(section,
                                                                     option)

        def get_option(config, section, option, default):
            if config_option_set(config, section, option):
                return config.get(section, option)

            return default

        statedir = get_option(config, 'paths', 'statedir', statedir)
        scriptdir = get_option(config, 'paths', 'scriptdir', scriptdir)
        plugindir = get_option(config, 'paths', 'plugindir', plugindir)
        bro_dist = get_option(config, 'paths', 'bro_dist', bro_dist)
        bro_exe = get_option(config, 'paths', 'bro_exe', bro_exe)

    else:
        config.add_section('paths')

    config.set('paths', 'statedir', statedir)
    config.set('paths', 'scriptdir', scriptdir)
    config.set('paths', 'plugindir', plugindir)
    config.set('paths', 'bro_exe', bro_exe)
    config.set('paths', 'bro_dist', bro_dist)

    manager = bropkg.Manager(statedir=statedir, scriptdir=scriptdir,
                             plugindir=plugindir, bro_dist=bro_dist)

    for key, value in config_items(config, 'sources'):
        if not manager.add_source(name=key, git_url=value):
            print_error(
                'error: invalid source repo "{}" in {} '.format(key,
                                                                config_path))
            sys.exit(1)

    return manager, config


def cmd_install(manager, args, config):
    if args.version and len(args.package) > 1:
        print_error(
            'error: "install --version" may only be used for a single package')
        sys.exit(1)

    for name in args.package:
        error = manager.install(name, args.version)

        if error:
            print_error('failed installing "{}": {}'.format(name, error))
            continue

        print('installed "{}"'.format(name))

        if manager.load(name):
            print('loaded "{}"'.format(name))
        else:
            print('failed to load "{}"'.format(name))


def cmd_remove(manager, args, config):
    for name in args.package:
        if manager.remove(name):
            print('removed "{}"'.format(name))
        else:
            print('failed removing "{}": no such package installed'.format(name))


def outdated(manager):
    return [ipkg.package.qualified_name()
            for ipkg in manager.installed_packages()
            if ipkg.status.is_outdated]


def cmd_refresh(manager, args, config):
    src_pkgs_before = {i.qualified_name() for i in manager.source_packages()}
    outdated_before = {i for i in outdated(manager)}
    manager.refresh()
    src_pkgs_after = {i.qualified_name() for i in manager.source_packages()}
    outdated_after = {i for i in outdated(manager)}

    if src_pkgs_before == src_pkgs_after:
        print('refreshed source packages: no changes')
    else:
        print('source package changes:')
        diff = src_pkgs_before.symmetric_difference(src_pkgs_after)

        for name in diff:
            change = 'added' if name in src_pkgs_after else 'removed'
            print('\t{} {}'.format(change, name))

    if outdated_before == outdated_after:
        print('refreshed installed packages: no new outdated packages')
    else:
        print('installed packages are outdated:')
        diff = outdated_before.symmetric_difference(outdated_after)

        for name in diff:
            print('\t{}'.format(name))


def cmd_upgrade(manager, args, config):
    if args.package:
        pkg_list = args.package
    else:
        pkg_list = outdated(manager)

    for name in pkg_list:
        res = manager.upgrade(name)

        if res:
            print('failed upgrading "{}": {}'.format(name, res))
        else:
            ipkg = manager.find_installed_package(name)
            print('upgraded "{}" ({})'.format(
                name, ipkg.status.current_version))


def cmd_load(manager, args, config):
    for name in args.package:
        if manager.load(name):
            print('loaded "{}"'.format(name))
        else:
            print_error(
                'failed loading "{}": no such package installed'.format(name))


def cmd_unload(manager, args, config):
    for name in args.package:
        if manager.unload(name):
            print('unloaded "{}"'.format(name))
        else:
            print_error(
                'failed unloading "{}": no such package installed'.format(name))


def cmd_pin(manager, args, config):
    for name in args.package:
        ipkg = manager.pin(name)

        if ipkg:
            print('pinned "{}" at version: {} ({})'.format(
                name, ipkg.status.current_version, ipkg.status.current_hash))
        else:
            print_error(
                'failed pinning "{}": no such package installed'.format(name))


def cmd_unpin(manager, args, config):
    for name in args.package:
        ipkg = manager.unpin(name)

        if ipkg:
            print('unpinned "{}" from version: {} ({})'.format(
                name, ipkg.status.current_version, ipkg.status.current_hash))
        else:
            print_error(
                'failed unpinning "{}": no such package installed'.format(name))


def all_packages(manager):
    source_pkgs = manager.source_packages()
    installed_pkgs = [ipkg.package for ipkg in manager.installed_packages()]
    pkg_dict = {pkg.git_url: (pkg, True) for pkg in installed_pkgs}

    for pkg in source_pkgs:
        if pkg.git_url not in pkg_dict:
            pkg_dict[pkg.git_url] = (pkg, False)

    return [value for _, value in pkg_dict.items()]


def cmd_list(manager, args, config):
    # @todo: improve formatting
    if args.category == 'all':
        for pkg_tuple in sorted(all_packages(manager)):
            pkg = pkg_tuple[0]
            installed = pkg_tuple[1]

            if installed:
                print('{} (installed)'.format(pkg))
            else:
                print('{}'.format(pkg))

    elif args.category == 'installed':
        installed_pkgs = [
            ipkg.package for ipkg in manager.installed_packages()]

        for pkg in sorted(installed_pkgs):
            print(pkg)

    elif args.category == 'not_installed':
        for pkg_tuple in sorted(all_packages(manager)):
            pkg = pkg_tuple[0]
            installed = pkg_tuple[1]

            if not installed:
                print('{}'.format(pkg))

    elif args.category == 'loaded':
        loaded_pkgs = [ipkg.package for ipkg in manager.loaded_packages()]

        for pkg in sorted(loaded_pkgs):
            print(pkg)

    elif args.category == 'unloaded':
        for ipkg in sorted(manager.installed_packages()):
            if not ipkg.status.is_loaded:
                print(ipkg.package)

    elif args.category == 'outdated':
        for ipkg in sorted(manager.installed_packages()):
            if ipkg.status.is_outdated:
                print(ipkg.package)

    else:
        raise NotImplementedError


def cmd_search(manager, args, config):
    # @todo: search metadata topics/tags
    src_pkgs = manager.source_packages()

    if args.search_text[0] == '/' and args.search_text[-1] == '/':
        import re

        try:
            regex = re.compile(args.search_text[1:-1])
        except re.error as error:
            print('invalid regex: {}'.format(error))
            sys.exit(1)
        else:
            matches = [pkg for pkg in src_pkgs if regex.search(
                pkg.module_path())]
    else:
        matches = [
            pkg for pkg in src_pkgs if args.search_text in pkg.module_path()]

    if matches:
        for match in matches:
            print(match.qualified_name())
    else:
        print("no matches")


def cmd_info(manager, args, config):
    for name in args.package:
        info = manager.info(name)
        print('"{}" info:'.format(name))

        if info.invalid_reason:
            print('\tinvalid package: {}'.format(info.invalid_reason))
            continue

        pkg = info.package
        print('\tgit URL: {}'.format(pkg.git_url))
        print('\tversions: {}'.format(pkg.versions))

        if info.status:
            print('\tinstall status:')

            for key, value in info.status.__dict__.items():
                print('\t\t{} = {}'.format(key, value))

        print('\tlatest metadata:')

        for key, value in pkg.metadata.items():
            print('\t\t{} = {}'.format(key, value))


def cmd_config(manager, args, config):
    import StringIO

    if args.config_param == 'all':
        out = StringIO.StringIO()
        config.write(out)
        print(out.getvalue())
        out.close()
    elif args.config_param == 'sources':
        for key, value in config_items(config, 'sources'):
            print('{} = {}'.format(key, value))
    else:
        print(config.get('paths', args.config_param))


def cmd_env(manager, args, config):
    import subprocess
    bro_exe = config.get('paths', 'bro_exe')

    if bro_exe:
        # Parse the output of 'bro --help' to determine starting values for
        # BROPATH and BRO_PLUGIN_PATH.  e.g. for users that don't set those
        # in their environment, bro has builtin paths to its installation
        # directory that it uses and this is an easy way to get things working
        # in that situation.  Parsing --help output isn't great, but we can
        # check 'bro --version' here if the output format ever changes or
        # just formalize some 'bro --config <param>' later to retrieve these
        # values in a more well-defined manner.
        cmd = subprocess.Popen([bro_exe, '--help'], stdout=subprocess.PIPE,
                               stderr=subprocess.STDOUT, bufsize=1)

        for line in cmd.stdout:
            parts = line.split()

            if not parts:
                continue

            if parts[0] == "$BROPATH":
                bropaths = [p for p in parts[-1][1:-1].split(':')]
            elif parts[0] == "$BRO_PLUGIN_PATH":
                pluginpaths = [p for p in parts[-1][1:-1].split(':')]

    else:
        # Start with whatever values the current environment uses and add
        # the package manager paths to them.
        bropath = os.environ.get('BROPATH')
        pluginpath = os.environ.get('BRO_PLUGIN_PATH')
        bropaths = [p for p in bropath.split(':')] if bropath else []
        pluginpaths = [p for p in pluginpath.split(':')] if pluginpath else []

    bropaths.append(manager.bropath())
    pluginpaths.append(manager.bro_plugin_path())

    if os.environ['SHELL'].endswith('csh'):
        print('setenv BROPATH {}'.format(':'.join(bropaths)))
        print('setenv BRO_PLUGIN_PATH {}'.format(':'.join(pluginpaths)))
    else:
        print('export BROPATH={}'.format(':'.join(bropaths)))
        print('export BRO_PLUGIN_PATH={}'.format(':'.join(pluginpaths)))


def main():
    top_parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='Manage Bro packages.',
        epilog='Environment Variables:\n\n'
        '    BRO_PKG_CONFIG_FILE\t'
        'Same as --configfile option, but takes precedence.'
    )
    top_parser.add_argument('--version', action='version',
                            version='%(prog)s ' + bropkg.__version__)
    top_parser.add_argument('--configfile',
                            help='Path to Bro Package Manager config file.')
    top_parser.add_argument('--verbose', '-v', action='count', default=0,
                            help='May be used multiple times (e.g. -vvv) for'
                            ' increased program output (e.g. for debugging)')

    command_parser = top_parser.add_subparsers(
        title='commands', dest='command',
        help='See `%(prog)s <command> -h` for per-command usage info.')

    # install
    sub_parser = command_parser.add_parser(
        'install',
        help='Install a package.', description='Install a package.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    sub_parser.set_defaults(run_cmd=cmd_install)
    sub_parser.add_argument(
        'package', nargs='+', help='Name(s) of package(s) to install.')
    sub_parser.add_argument(
        '--version', default=None,
        help='The version of the package to install.')

    # remove
    sub_parser = command_parser.add_parser(
        'remove', help='Remove a package.',
        description='Remove a previously installed package',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    sub_parser.set_defaults(run_cmd=cmd_remove)
    sub_parser.add_argument(
        'package', nargs='+', help='Name(s) of package(s) to remove.')

    # refresh
    sub_parser = command_parser.add_parser(
        'refresh',
        help='Retrieve latest package information from package sources.',
        description='Retrieve latest client version and aggregated package'
        ' metadata from package source repositories.  This does not upgrade'
        ' installed packages (see the "upgrade" command for that).',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    sub_parser.set_defaults(run_cmd=cmd_refresh)

    # upgrade
    sub_parser = command_parser.add_parser(
        'upgrade',
        help='Upgrade installed packages to latest versions.',
        description='Uprades package(s) to latest available version.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    sub_parser.set_defaults(run_cmd=cmd_upgrade)
    sub_parser.add_argument(
        'package', nargs='*', default=[],
        help='Name(s) of package(s) to upgrade (or blank to upgrade all).')

    # load
    sub_parser = command_parser.add_parser(
        'load',
        help='Register packages to be be auto-loaded by Bro.',
        description='The Bro Package Manager keeps track of all packages that'
        ' are marked as "loaded" and supplies necessary config files to make it'
        ' easy/convenient for Bro to load all such packages at once.  This'
        ' command adds a set of packages to the "loaded packages" list.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    sub_parser.set_defaults(run_cmd=cmd_load)
    sub_parser.add_argument(
        'package', nargs='+', default=[],
        help='Name(s) of package(s) to load.')

    # unload
    sub_parser = command_parser.add_parser(
        'unload',
        help='Register packages to be be auto-loaded by Bro.',
        description='The Bro Package Manager keeps track of all packages that'
        ' are marked as "loaded" and supplies necessary config files to make it'
        ' easy/convenient for Bro to load all such packages at once.  This'
        ' command removes a set of packages from the "loaded packages" list.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    sub_parser.set_defaults(run_cmd=cmd_unload)
    sub_parser.add_argument(
        'package', nargs='+', default=[],
        help='Name(s) of package(s) to unload.')

    # pin
    sub_parser = command_parser.add_parser(
        'pin',
        help='Prevent packages from being automatically upgraded.',
        description='Packages that are pinned will be ignored by "upgrade."',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    sub_parser.set_defaults(run_cmd=cmd_pin)
    sub_parser.add_argument(
        'package', nargs='+', default=[],
        help='Name(s) of package(s) to pin.')

    # unpin
    sub_parser = command_parser.add_parser(
        'unpin',
        help='Allows packages to be automatically upgraded.',
        description='Packages that are not pinned are automatically upgraded'
        ' by "upgrade."',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    sub_parser.set_defaults(run_cmd=cmd_unpin)
    sub_parser.add_argument(
        'package', nargs='+', default=[],
        help='Name(s) of package(s) to unpin.')

    # list
    sub_parser = command_parser.add_parser(
        'list',
        help='Lists packages.',
        description='Packages that are not pinned are automatically upgraded'
        ' by "upgrade."',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    sub_parser.set_defaults(run_cmd=cmd_list)
    sub_parser.add_argument('category', nargs='?', default='installed',
                            choices=['all', 'installed', 'not_installed',
                                     'loaded', 'unloaded', 'outdated'],
                            help='Package category used to filter listing.')

    # search
    sub_parser = command_parser.add_parser(
        'search',
        help='Search packages for matching names.',
        description='Perform a substring search on package names and metadata'
        ' tags.  Surround search text with slashes to indicate it is a regular'
        ' expression (e.g. "/text/").',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    sub_parser.set_defaults(run_cmd=cmd_search)
    sub_parser.add_argument('search_text',
                            help='Text to match against package names.')

    # info
    sub_parser = command_parser.add_parser(
        'info',
        help='Display package information.',
        description='Shows more detailed information for given packages.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    sub_parser.set_defaults(run_cmd=cmd_info)
    sub_parser.add_argument(
        'package', nargs='+', default=[],
        help='Name(s) of package(s) to query.')

    # config
    sub_parser = command_parser.add_parser(
        'config',
        help='Show Bro Package Manager configuration info.',
        description='Show Bro Package Manager configuration info.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    sub_parser.set_defaults(run_cmd=cmd_config)
    sub_parser.add_argument(
        'config_param', nargs='?', default='all',
        choices=['all', 'sources', 'statedir', 'scriptdir',
                 'plugindir', 'bro_exe', 'bro_dist'],
        help='Name of the config parameter to output.')

    # env
    sub_parser = command_parser.add_parser(
        'env',
        help='Show environment variables needed for Bro to be able to use '
             'packages installed by the Bro Package Manager.',
        description='Show Bro Package Manager environment info.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    sub_parser.set_defaults(run_cmd=cmd_env)

    args = top_parser.parse_args()

    if args.verbose > 0:
        formatter = logging.Formatter(
            '%(asctime)s %(levelname)-8s %(message)s', '%Y-%m-%d %H:%M:%S')
        handler = logging.StreamHandler()
        handler.setFormatter(formatter)

        if args.verbose == 1:
            bropkg.LOG.setLevel(logging.WARNING)
        elif args.verbose == 2:
            bropkg.LOG.setLevel(logging.INFO)
        elif args.verbose == 3:
            bropkg.LOG.setLevel(logging.DEBUG)

        bropkg.LOG.addHandler(handler)

    manager, config = create_manager(args.configfile)

    args.run_cmd(manager, args, config)


if __name__ == '__main__':
    main()
    sys.exit(0)
